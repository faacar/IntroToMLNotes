# -*- coding: utf-8 -*-
"""week7_lab.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ru-2lk1p2KHoRPemRtgIeRxS8bvxrX6y
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
# %%
data = pd.read_csv("sample_data/data.csv")

M = data[data.diagnosis == "M"]
B = data[data.diagnosis == "B"]
# scatter plot
plt.scatter(M.radius_mean,M.texture_mean,color="red",label="kotu",alpha= 0.3)
plt.scatter(B.radius_mean,B.texture_mean,color="green",label="iyi",alpha= 0.3)
plt.xlabel("radius_mean")
plt.ylabel("texture_mean")
plt.legend()
plt.show()

#Linear SVM Classification
from sklearn import datasets
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler
from sklearn.svm import LinearSVC

iris = datasets.load_iris()
x = iris["data"][:, (2, 3)]
y = (iris["target"] == 2).astype(np.float64)
svm_clf = Pipeline([
                    ("scaler", StandardScaler()),
                    ("linear_svc", LinearSVC(C=1, loss="hinge")),
   ])
svm_clf.fit(x, y)
svm_clf.predict([[5.1, 1.7]])

from sklearn.datasets import make_moons
from sklearn.preprocessing import PolynomialFeatures

polynomial_svm_clf = Pipeline([
("poly_features", PolynomialFeatures(degree=3)), ("scaler", StandardScaler()),
("svm_clf", LinearSVC(C=10, loss="hinge"))
  ])
polynomial_svm_clf.fit(x, y)

data.diagnosis = [1 if each == "M" else 0 for each in data.diagnosis]
y = data.diagnosis.values
x_data = data.drop(["diagnosis"],axis=1)
#normalization
x = (x_data - np.min(x_data))/(np.max(x_data)-np.min(x_data))

from sklearn.model_selection import train_test_split
#train
x_train, x_test, y_train, y_test = train_test_split(x,y,test_size = 0.1,random_state=1)

from sklearn.svm import SVC
 
svm = SVC(random_state = 1)
# got error dont know why?
svm.fit(x_train,y_train)
print("print accuracy of svm algo: ",svm.score(x_test,y_test))

from sklearn.metrics import confusion_matrix

y_pred = svm.predict(x_test)  
y_pred
confusion_matrix(y_test, y_pred)

